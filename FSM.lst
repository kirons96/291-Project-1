                  2   $LIST
0000              4   
0000              5   CLK           EQU 22118400 ; Microcontroller system crystal frequency in Hz
0000              6   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000              7   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000              8   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0000              9   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0000             10   
0000             11   BAUD EQU 115200
0000             12   T2LOAD EQU (0x10000-(CLK/(16*BAUD)))
0000             13   
0000             14   BOOT_BUTTON     EQU P4.5 ;reset button
0000             15   SOUND_OUT       EQU P3.7
0000             16   PWM_PIN                  EQU P0.0 ;change later
0000             17   START_BUTTON     EQU P0.2 ;start button
0000             18   
0000             19   ; Wiring for ADC
0000             20   ;CE_ADC EQU P3.5
0000             21   ;MY_MOSI EQU P3.4
0000             22   ;MY_MISO EQU P3.3
0000             23   ;MYSCLK EQU P3.2
0000             24   
0000             25   
0000             26   
0000             27   ; Reset vector
0000             28   org 0000H
0000 020596      29       ljmp main
0003             30   
0003             31   ; External interrupt 0 vector (not used in this code)
0003             32   org 0003H
0003 32          33            reti
0004             34   
0004             35   ; Timer/Counter 0 overflow interrupt vector
000B             36   org 000BH
000B 020453      37            ljmp Timer0_ISR
000E             38   
000E             39   ; External interrupt 1 vector (not used in this code)
0013             40   org 0013H
0013 32          41            reti
0014             42   
0014             43   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             44   org 001BH
001B 32          45            reti
001C             46   
001C             47   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             48   org 0023H 
0023 32          49            reti
0024             50            
0024             51   ; Timer/Counter 2 overflow interrupt vector
002B             52   org 002BH
002B 0204C6      53            ljmp Timer2_ISR
002E             54   
0030             55   dseg at 30h
0030             56   Count1ms:        ds 2 ; Used to determine when half second has passed
0032             57   CURRENT_STATE:   ds 1 ;current state 
0033             58   
0033             59   ;math32.inc variables
0033             60   x:   ds 4
0037             61   y:   ds 4
003B             62   bcd: ds 5
0040             63   
0040             64   ;FSM VARIABLES
0040             65   SEC_COUNTER:     ds 2 ;timer
0042             66   SEC_COUNTER_TOTAL: ds 2 ; total run time
0044             67   TEMP:                    ds 2 ;temperature
0046             68   
0046             69   ;PWM VARIABLES
0046             70   PWM_FLAG:                ds 1 ;
0047             71   PWM_COUNTER:     ds 1 ;timing
0048             72   PWM_OFF:                 ds 1 ;constants
0049             73   PWM_LOW:                 ds 1
004A             74   PWM_HIGH:                ds 1
004B             75   
004B             76   ;BEEPER FEEDBACK VARIABLES
004B             77   ;SHORT_BEEP:             ds 1
004B             78   SHORT_BEEP_COUNTER: ds 1
004C             79   ;LONG_BEEP:              ds 1
004C             80   ;LONG_BEEP_COUNTER: ds 1
004C             81   
004C             82   ;User settings variables
004C             83   buffer_temp: ds 2
004E             84   buffer_time: ds 2
0050             85   soak_temp: ds 2
0052             86   soak_time: ds 2
0054             87   reflow_temp: ds 2
0056             88   reflow_time: ds 2
0058             89   
0058             90   
0000             91   bseg
0000             92   half_seconds_flag: dbit 1 ; Set to one in the ISR every time 500 ms had passed
0001             93   start_reload_flag: dbit 1
0002             94   start_sec_counter: dbit 1
0003             95   start_sec_counter_total: dbit 1
0004             96   state3_transition_flag: dbit 1
0005             97   state5_transition_flag: dbit 1
0006             98   state_transition_beep_flag: dbit 1
0007             99   long_beep_flag: dbit 1
0008            100   six_short_beep_flag: dbit 1
0009            101   
0009            102   ;for math32.inc
0009            103   mf: dbit 1
000A            104   
000A            105   
002E            106   cseg
002E            107   ; These 'equ' must match the wiring between the microcontroller and the LCD!
002E            108   LCD_RS equ P1.4
002E            109   LCD_RW equ P1.5
002E            110   LCD_E  equ P1.6
002E            111   LCD_D4 equ P3.2
002E            112   LCD_D5 equ P3.3
002E            113   LCD_D6 equ P3.4
002E            114   LCD_D7 equ P3.5
                546   $LIST
                118   $LIST
034C            120   
034C            121   ;
034C            122   ;                          1234567890123456    <- This helps determine the position of the counter
034C 53484945   123   Stopped_Message:      db  'SHIET MANNNN    ', 0
     54204D41
     4E4E4E4E
     20202020
     00
035D 72657374   124   Stopped_Message2:     db  'restarting...   ', 0
     61727469
     6E672E2E
     2E202020
     00
036E 5265666C   125   Finished_Message:     db  'Reflow complete!', 0
     6F772063
     6F6D706C
     65746521
     00
037F 733A7878   126   Oven_Default_Message1: db 's:xxxs  xxxC xxx', 0
     78732020
     78787843
     20787878
     00
0390 723A7878   127   Oven_Default_Message2: db 'r:xxxs  xxxC    ', 0
     78732020
     78787843
     20202020
     00
03A1 6F666600   128   Oven_Off_Message: db 'off', 0
03A5 72756E00   129   Oven_On_Message:  db 'run', 0
03A9 3A00       130   Colon: db ':', 0
03AB 2020736F   131   Soak_Or_Reflow_Message1:   db '  soak  reflow  ', 0
     616B2020
     7265666C
     6F772020
     00
03BC 20202875   132   Soak_Or_Reflow_Message2:   db '  (up)  (down)  ', 0
     70292020
     28646F77
     6E292020
     00
03CD 74696D65   133   Time_Message:     db 'time: xxxxs     ', 0
     3A207878
     78787320
     20202020
     00
03DE 74656D70   134   Temp_Message:     db 'temp: xxxxC     ', 0
     3A207878
     78784320
     20202020
     00
03EF 78787878   135   Okay_Message:     db 'xxxxs xxxxC  ok?', 0
     73207878
     78784320
     206F6B3F
     00
0400 73657420   136   Continue:         db 'set to continue ', 0
     746F2063
     6F6E7469
     6E756520
     00
0411 20202020   137   Clear:            db '                ', 0
     20202020
     20202020
     20202020
     00
0422 2000       138   Space: db ' ', 0
0424 53746174   139   Display_State_Message:  db 'State:', 0
     653A00
042B 48656C6C   140   Hello_World:  db  'Hello, World!', '\r', '\n', 0
     6F2C2057
     6F726C64
     210D0A00
043B 0D0A00     141   End_Transmission: db '\r', '\n', 0
043E            142   
043E            143   
043E            144   ;---------------------------------;
043E            145   ; Routine to initialize the ISR   ;
043E            146   ; for timer 0                     ;
043E            147   ;---------------------------------;
043E            148   Timer0_Init:
043E E589       149            mov a, TMOD
0440 54F0       150            anl a, #0xf0 ; Clear the bits for timer 0
0442 4401       151            orl a, #0x01 ; Configure timer 0 as 16-timer
0444 F589       152            mov TMOD, a
0446 758CEA     153            mov TH0, #high(TIMER0_RELOAD)
0449 758AE8     154            mov TL0, #low(TIMER0_RELOAD)
044C            155            ; Enable the timer and interrupts
044C D2A9       156       setb ET0  ; Enable timer 0 interrupt
044E D28C       157       setb TR0  ; Start timer 0
0450 D2AF       158       setb EA   ; Enable Global interrupts
0452 22         159            ret
0453            160   
0453            161   ;---------------------------------;
0453            162   ; ISR for timer 0.  Set to execute;
0453            163   ; every 1/4096Hz to generate a    ;
0453            164   ; 2048 Hz square wave at pin P3.7 ;
0453            165   ;---------------------------------;
0453            166   Timer0_ISR:
0453            167            ; Define a latency correction for the timer reload
0453            168            CORRECTION EQU (4+4+2+2+4+4) ; lcall+ljmp+clr+mov+mov+setb
0453            169            ; In mode 1 we need to reload the timer.
0453 C28C       170            clr TR0
0455 758CEA     171            mov TH0, #high(TIMER0_RELOAD+CORRECTION)
0458 758AFC     172            mov TL0, #low(TIMER0_RELOAD+CORRECTION)
045B D28C       173            setb TR0
045D            174            
045D            175            ;push acc
045D            176            ;push psw
045D            177            
045D            178            ;************BEEPER************
045D            179            ; check to see if START_BUTTON is pressed
045D 200102     180            jb start_reload_flag, beep_transition ; if start_reload_flag is not yet set, skip over
0460 B2B7       181            cpl P3.7 ; turn on speaker
0462            182   
0462            183   beep_transition:
0462 200602     184            jb state_transition_beep_flag, long_beep_transition
0465 B2B7       185            cpl P3.7 ; turn on speaker
0467            186   long_beep_transition:
0467 200702     187            jb long_beep_flag, six_short_beeps
046A B2B7       188            cpl P3.7
046C            189   
046C            190   six_short_beeps:
046C 200802     191            jb six_short_beep_flag, CHECK_OFF
046F B2B7       192            cpl P3.7
0471            193            
0471            194            ;**************PWM**************
0471            195            ;CHANGE THE CODE: CLR THE PIN BELOW, SET IT ON ABOVE AT 0
0471            196   CHECK_OFF:
0471 C0E0       197            push acc
0473 C0D0       198            push psw
0475            199            
0475 E546       200            mov a, PWM_FLAG
0477 B54804     201            cjne a, PWM_OFF, CHECK_LOW
047A            202            
047A D280       203            setb PWM_PIN
047C            204            
047C 8010       205            sjmp CHECK_COMPLETE
047E            206   
047E            207   CHECK_LOW:
047E E546       208            mov a, PWM_FLAG
0480 B54909     209            cjne a, PWM_LOW, CHECK_HIGH
0483            210            
0483 E547       211            mov a, PWM_COUNTER
0485 B54906     212            cjne a, PWM_LOW, CHECK_COMPLETE
0488            213   
0488 D280       214            setb PWM_PIN
048A            215            
048A 8002       216            sjmp CHECK_COMPLETE
048C            217   
048C            218   CHECK_HIGH:
048C C280       219            clr PWM_PIN
048E            220   
048E            221   CHECK_COMPLETE:
048E            222            ;incrementing
048E E547       223            mov a, PWM_COUNTER
0490 2401       224            add a, #1
0492 F547       225            mov PWM_COUNTER, a
0494            226            
0494            227            ;checking for end of PWM
0494 E547       228            mov a, PWM_COUNTER
0496 B54A0B     229            cjne a, PWM_HIGH, FINISH_T0 ;PWM_HIGH is the max counter
0499            230   
0499            231   RESET_PWM_COUNTER:
0499 7400       232            mov a, #0
049B F547       233            mov PWM_COUNTER, a
049D            234            
049D            235            ;only change when PWM is low
049D E546       236            mov a, PWM_FLAG
049F B54902     237            cjne a, PWM_LOW, FINISH_T0
04A2 C280       238            clr PWM_PIN                     
04A4            239            
04A4            240   FINISH_T0:
04A4 D0D0       241            pop psw
04A6 D0E0       242            pop acc
04A8 32         243            reti
04A9            244   
04A9            245   ;---------------------------------;
04A9            246   ; Routine to initialize the ISR   ;
04A9            247   ; for timer 2                     ;
04A9            248   ;---------------------------------;
04A9            249   Timer2_Init:
04A9 C0E0       250            push acc
04AB C0D0       251            push psw
04AD            252   
04AD 75C800     253            mov T2CON, #0 ; Stop timer.  Autoreload mode.
04B0            254            ; One millisecond interrupt
04B0 75CBA9     255            mov RCAP2H, #high(TIMER2_RELOAD)
04B3 75CA9A     256            mov RCAP2L, #low(TIMER2_RELOAD)
04B6            257            ; Set the 16-bit variable Count1ms to zero
04B6 E4         258            clr a
04B7 F530       259            mov Count1ms+0, a
04B9 F531       260            mov Count1ms+1, a
04BB            261            ; Enable the timer and interrupts
04BB D2AD       262       setb ET2  ; Enable timer 2 interrupt
04BD D2CA       263       setb TR2  ; Enable timer 2
04BF D2AF       264       setb EA   ; Enable Global interrupts
04C1            265   
04C1 D0D0       266            pop psw
04C3 D0E0       267            pop acc
04C5 22         268            ret
04C6            269   
04C6            270   ;---------------------------------;
04C6            271   ; ISR for timer 2                 ;
04C6            272   ;---------------------------------;
04C6            273   Timer2_ISR:
04C6 C2CF       274            clr TF2  ; Timer 2 doesn't clear TF2 automatically in ISR
04C8 B2B6       275            cpl P3.6 ; To check the interrupt rate with oscilloscope. It must be a 1 ms pulse.
04CA            276            
04CA            277            ; The two registers used in the ISR must be saved in the stack
04CA C0E0       278            push acc
04CC C0D0       279            push psw
04CE            280            
04CE            281            ; Increment the 16-bit counter
04CE 0530       282            inc Count1ms+0    ; Increment the low 8-bits first
04D0 E530       283            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
04D2 7002       284            jnz Inc_Done
04D4 0531       285            inc Count1ms+1
04D6            286   
04D6            287   Inc_Done:
04D6            288            ; Check if 1 second has passed
04D6 E530       289            mov a, Count1ms+0
04D8 B4E807     290            cjne a, #low(1000), jump_timer2_done 
04DB            291            
04DB E531       292            mov a, Count1ms+1
04DD B40302     293            cjne a, #high(1000), jump_timer2_done
04E0            294            
04E0 8003       295            sjmp second_passed      
04E2            296   
04E2            297   jump_timer2_done:
04E2 02056D     298            ljmp Timer2_ISR_done
04E5            299   
04E5            300   second_passed:
04E5            301            ; 1 second has passed.  Set a flag so the main program knows
04E5 D200       302            setb half_seconds_flag ; Let the main program know half second had passed
04E7            303            ;cpl TR1 ; This line makes a beep-silence-beep-silence sound
04E7            304   
04E7            305            ;************COUNTER************
04E7 E4         306            clr a
04E8 F530       307            mov Count1ms+0, a
04EA F531       308            mov Count1ms+1, a
04EC            309            ;***********Debug Temp Counter***       
04EC E544       310            mov a, TEMP
04EE B4990D     311            cjne a, #0x99, no_overflow
04F1            312            ;clr psw
04F1 E4         313            clr a
04F2 D4         314            da a
04F3 F544       315            mov TEMP, a
04F5 E545       316            mov a, TEMP + 1
04F7 2401       317            add a, #0x01
04F9 D4         318            da a
04FA F545       319            mov TEMP + 1, a         
04FC 8005       320            sjmp debug_counter_done
04FE            321   
04FE            322   no_overflow:
04FE 2401       323            add a, #0x01
0500 D4         324            da a 
0501 F544       325            mov TEMP, a
0503            326   
0503            327   debug_counter_done:
0503            328            ;************BEEPER************
0503            329            ; condition to even consider SHORT_BEEP_COUNTER
0503 20010F     330            jb start_reload_flag, state_transition_beeps ; if start_reload_flag in main is not yet set, skip over
0506 E54B       331            mov a, SHORT_BEEP_COUNTER
0508 2401       332            add a, #0x01
050A D4         333            da a 
050B F54B       334            mov SHORT_BEEP_COUNTER, a 
050D B4015D     335            cjne a, #0x01, Timer2_ISR_done
0510 B201       336            cpl start_reload_flag ; clear flag & turn off speaker
0512 754B00     337            mov SHORT_BEEP_COUNTER, #0x00
0515            338            
0515            339            ;****STATE TRANSITION BEEPS****
0515            340   state_transition_beeps:
0515 20060F     341            jb state_transition_beep_flag, long_beep
0518 E54B       342            mov a, SHORT_BEEP_COUNTER
051A 2401       343            add a, #0x01
051C D4         344            da a 
051D F54B       345            mov SHORT_BEEP_COUNTER, a 
051F B4014B     346            cjne a, #0x01, Timer2_ISR_done
0522 B206       347            cpl state_transition_beep_flag ; clear flag & turn off speaker
0524 754B00     348            mov SHORT_BEEP_COUNTER, #0x00
0527            349            
0527            350            ;********LONG BEEP*********
0527            351   long_beep:
0527 20070F     352            jb long_beep_flag, Check_SEC_COUNTER
052A E54B       353            mov a, SHORT_BEEP_COUNTER
052C 2401       354            add a, #0x01
052E D4         355            da a
052F F54B       356            mov SHORT_BEEP_COUNTER, a
0531 B40339     357            cjne a, #0x03, Timer2_ISR_done
0534 B207       358            cpl long_beep_flag ; clear flag & turn off long beep speaker
0536 754B00     359            mov SHORT_BEEP_COUNTER, #0x00
0539            360            
0539            361            ;****STATE TRANSITIONS*****
0539            362   
0539            363   Check_SEC_COUNTER:
0539 300217     364            jnb start_sec_counter, Check_SEC_COUNTER_TOTAL
053C            365   
053C E540       366            mov a, SEC_COUNTER
053E B4990D     367            cjne a, #0x99, sec_counter_no_overflow
0541 E4         368            clr a
0542 D4         369            da a
0543 F540       370            mov SEC_COUNTER, a
0545 E541       371            mov a, SEC_COUNTER + 1
0547 2401       372            add a, #0x01
0549 D4         373            da a
054A F541       374            mov SEC_COUNTER + 1, a
054C 801F       375            sjmp Timer2_ISR_done
054E            376   
054E            377   sec_counter_no_overflow:
054E 2401       378            add a, #0x01
0550 D4         379            da a
0551 F540       380            mov SEC_COUNTER, a
0553            381   
0553            382   Check_SEC_COUNTER_TOTAL:
0553 300317     383            jnb start_sec_counter_total, Timer2_ISR_done ;
0556            384   
0556 E542       385            mov a, SEC_COUNTER_TOTAL
0558 B4990D     386            cjne a, #0x99, sec_counter_total_no_overflow
055B E4         387            clr a
055C D4         388            da a
055D F542       389            mov SEC_COUNTER_TOTAL, a
055F E543       390            mov a, SEC_COUNTER_TOTAL + 1
0561 2401       391            add a, #0x01
0563 D4         392            da a
0564 F543       393            mov SEC_COUNTER_TOTAL + 1, a
0566 8005       394            sjmp Timer2_ISR_done
0568            395   
0568            396   sec_counter_total_no_overflow:
0568 2401       397            add a, #0x01
056A D4         398            da a
056B F542       399            mov SEC_COUNTER_TOTAL, a
056D            400            
056D            401   Timer2_ISR_done:
056D D0D0       402            pop psw
056F D0E0       403            pop acc
0571 32         404            reti
0572            405   
0572            406   ;---------------------------------;
0572            407   ; Serial Stuff                    ;
0572            408   ;                                 ;
0572            409   ;---------------------------------;
0572            410   
0572            411   ; Configure the serial port and baud rate using timer 2
0572            412   InitSerialPort:
0572 C2CA       413            clr TR2 ; Disable timer 2
0574 75C830     414            mov T2CON, #30H ; RCLK=1, TCLK=1 
0577 75CBFF     415            mov RCAP2H, #high(T2LOAD)  
057A 75CAF4     416            mov RCAP2L, #low(T2LOAD)
057D D2CA       417            setb TR2 ; Enable timer 2
057F 759852     418            mov SCON, #52H
0582 22         419            ret
0583            420   
0583            421   ; Send a character using the serial port
0583            422   putchar:
0583 3099FD     423            JNB TI, putchar
0586 C299       424            CLR TI
0588 F599       425            MOV SBUF, a
058A 22         426            RET
058B            427   
058B            428   ; Send a constant-zero-terminated string through the serial port
058B            429   SendString:
058B E4         430            CLR A
058C 93         431            MOVC A, @A+DPTR
058D 6006       432            JZ SendStringDone
058F 120583     433            LCALL putchar
0592 A3         434            INC DPTR
0593 80F6       435            SJMP SendString
0595            436   SendStringDone:
0595 22         437            ret
0596            438   
0596            439   
0596            440   ;---------------------------------;
0596            441   ; Main program. Includes hardware ;
0596            442   ; initialization and 'forever'    ;
0596            443   ; loop.                           ;
0596            444   ;---------------------------------;
0596            445   main:
0596            446            ; Initialization
0596 75817F     447            mov SP, #7FH
0599 75C100     448            mov PMOD, #0 ; Configure all ports in bidirectional mode
059C            449   
059C 12043E     450           lcall Timer0_Init
059F 1204A9     451            lcall Timer2_Init
05A2 120088     452            lcall LCD_4BIT
05A5 C0E0       453            push acc
05A7 7401       453            mov a, #1
05A9 14         453            dec a
05AA 1200C1     453            lcall ?Set_Cursor_1 ; Select column and row
05AD D0E0       453            pop acc                         
05AF C083       454            push dph
05B1 C082       454            push dpl
05B3 C0E0       454            push acc
05B5 900424     454            mov dptr, #Display_State_Message
05B8 1200B4     454            lcall ?Send_Constant_String
05BB D0E0       454            pop acc
05BD D082       454            pop dpl
05BF D083       454            pop dph
05C1            455            
05C1            456            ; Flags
05C1 C204       457            clr state3_transition_flag
05C3 D200       458            setb half_seconds_flag
05C5 C202       459            clr start_sec_counter
05C7 C203       460            clr start_sec_counter_total
05C9            461   
05C9            462   
05C9 754100     463            mov SEC_COUNTER + 1, #0x00
05CC 754040     464            mov SEC_COUNTER, #0x40
05CF            465   
05CF 754300     466            mov SEC_COUNTER_TOTAL + 1, #0x00
05D2 754200     467            mov SEC_COUNTER_TOTAL, #0x00
05D5            468   
05D5 753200     469            mov CURRENT_STATE, #0
05D8 754700     470            mov PWM_COUNTER, #0
05DB 854846     471            mov PWM_FLAG, PWM_OFF
05DE 754800     472            mov PWM_OFF, #0
05E1 754901     473            mov PWM_LOW, #1 ;because weird bug (ask kiron)
05E4 754A0A     474            mov PWM_HIGH, #10
05E7 754B00     475            mov SHORT_BEEP_COUNTER, #0x00
05EA            476   
05EA 754501     477            mov TEMP + 1, #0x01
05ED 754440     478            mov TEMP, #0x40
05F0            479   
05F0 755101     480            mov soak_temp + 1, #0x01
05F3 755050     481            mov soak_temp, #0x50
05F6            482   
05F6 755300     483            mov soak_time + 1, #0x00
05F9 755260     484            mov soak_time, #0x60
05FC            485   
05FC 755502     486            mov reflow_temp + 1, #0x02
05FF 755420     487            mov reflow_temp, #0x20
0602            488   
0602 755700     489            mov reflow_time + 1, #0x00
0605 755645     490            mov reflow_time, #0x45
0608            491   
0608            492   
0608            493            ; After initialization the program stays in this 'forever' loop
0608            494   forever:
0608 8017       495            sjmp loop_a
060A            496   
060A C28C       497            clr TR0
060C E4         498            clr a
060D F530       499            mov Count1ms+0, a
060F F531       500            mov Count1ms+1, a
0611            501            
0611            502   
0611            503   
0611 753200     504            mov CURRENT_STATE, #0x00
0614 754700     505            mov PWM_COUNTER, #0x00
0617 854846     506            mov PWM_FLAG, PWM_OFF
061A 754B00     507            mov SHORT_BEEP_COUNTER, #0x00
061D D28C       508            setb TR0                ; Re-enable the timer
061F 8003       509            sjmp loop_b             ; Display the new value
0621            510   
0621            511   
0621            512   loop_a:
0621 3000E4     513            jnb half_seconds_flag, forever
0624            514   loop_b:
0624 C200       515           clr half_seconds_flag ; We clear this flag in the main forever, but it is set in the ISR for timer 0
0626            516   
0626            517            ; show debug temp counter
0626 C0E0       518            push acc
0628 7401       518            mov a, #1
062A 14         518            dec a
062B 1200BF     518            lcall ?Set_Cursor_2 ; Select column and row
062E D0E0       518            pop acc
0630 C000       519            push ar0
0632 A845       519            mov r0, TEMP + 1
0634 1200C6     519            lcall ?Display_BCD
0637 D000       519            pop ar0
0639 C0E0       520            push acc
063B 7403       520            mov a, #3
063D 14         520            dec a
063E 1200BF     520            lcall ?Set_Cursor_2 ; Select column and row
0641 D0E0       520            pop acc
0643 C000       521            push ar0
0645 A844       521            mov r0, TEMP
0647 1200C6     521            lcall ?Display_BCD
064A D000       521            pop ar0
064C            522   
064C            523            ; show state second timer
064C C0E0       524            push acc
064E 7406       524            mov a, #6
0650 14         524            dec a
0651 1200BF     524            lcall ?Set_Cursor_2 ; Select column and row
0654 D0E0       524            pop acc
0656 C000       525            push ar0
0658 A841       525            mov r0, SEC_COUNTER + 1
065A 1200C6     525            lcall ?Display_BCD
065D D000       525            pop ar0
065F C0E0       526            push acc
0661 7408       526            mov a, #8
0663 14         526            dec a
0664 1200BF     526            lcall ?Set_Cursor_2 ; Select column and row
0667 D0E0       526            pop acc
0669 C000       527            push ar0
066B A840       527            mov r0, SEC_COUNTER
066D 1200C6     527            lcall ?Display_BCD
0670 D000       527            pop ar0
0672            528   
0672            529            ; show state second timer
0672 C0E0       530            push acc
0674 740B       530            mov a, #11
0676 14         530            dec a
0677 1200BF     530            lcall ?Set_Cursor_2 ; Select column and row
067A D0E0       530            pop acc
067C C000       531            push ar0
067E A843       531            mov r0, SEC_COUNTER_TOTAL + 1
0680 1200C6     531            lcall ?Display_BCD
0683 D000       531            pop ar0
0685 C0E0       532            push acc
0687 740D       532            mov a, #13
0689 14         532            dec a
068A 1200BF     532            lcall ?Set_Cursor_2 ; Select column and row
068D D0E0       532            pop acc
068F C000       533            push ar0
0691 A842       533            mov r0, SEC_COUNTER_TOTAL
0693 1200C6     533            lcall ?Display_BCD
0696 D000       533            pop ar0
0698            534   
0698            535            ; Serial        
0698 C2AF       536            clr EA ; mask interrupts
069A 120572     537            lcall InitSerialPort
069D E544       538            mov a, TEMP
069F 120583     539            lcall putchar
06A2 90043B     540            mov dptr, #End_Transmission
06A5 12058B     541            lcall SendString
06A8 C002       542            push AR2
06AA 7A01       542            mov R2, #1
06AC 120039     542            lcall ?Wait_Milli_Seconds
06AF D002       542            pop AR2
06B1 1204A9     543            lcall Timer2_Init
06B4            544   
06B4 E532       545            mov a, CURRENT_STATE
06B6            546   
06B6            547   STATE0:
06B6 B40077     548            cjne a, #0x00, STATE1 ; change this back to STATE1
06B9 854846     549            mov PWM_FLAG, PWM_OFF
06BC C0E0       550            push acc
06BE 7407       550            mov a, #7
06C0 14         550            dec a
06C1 1200C1     550            lcall ?Set_Cursor_1 ; Select column and row
06C4 D0E0       550            pop acc                         
06C6 C000       551            push ar0
06C8 7800       551            mov r0, #0
06CA 1200C6     551            lcall ?Display_BCD
06CD D000       551            pop ar0
06CF B281       552            cpl P0.1 ; to test if state 5->0 transition works correctly
06D1            553   
06D1 208208     554            jb P0.2, STATE0_DONE
06D4 3082FD     555            jnb P0.2, $ ; Wait for key release
06D7            556   
06D7 B201       557            cpl start_reload_flag ; set start_reload_flag.....this beep indicates START = YES & transition to STATE 1
06D9 753201     558            mov CURRENT_STATE, #0x01 ; change this back to #0x01
06DC            559   STATE0_DONE:
06DC 020608     560            ljmp forever
06DF            561   
06DF            562   STOPPED:
06DF C0E0       563            push acc
06E1 7401       563            mov a, #1
06E3 14         563            dec a
06E4 1200C1     563            lcall ?Set_Cursor_1 ; Select column and row
06E7 D0E0       563            pop acc
06E9 C083       564            push dph
06EB C082       564            push dpl
06ED C0E0       564            push acc
06EF 90034C     564            mov dptr, #Stopped_Message
06F2 1200B4     564            lcall ?Send_Constant_String
06F5 D0E0       564            pop acc
06F7 D082       564            pop dpl
06F9 D083       564            pop dph
06FB C0E0       565            push acc
06FD 7401       565            mov a, #1
06FF 14         565            dec a
0700 1200BF     565            lcall ?Set_Cursor_2 ; Select column and row
0703 D0E0       565            pop acc
0705 C083       566            push dph
0707 C082       566            push dpl
0709 C0E0       566            push acc
070B 90035D     566            mov dptr, #Stopped_Message2
070E 1200B4     566            lcall ?Send_Constant_String
0711 D0E0       566            pop acc
0713 D082       566            pop dpl
0715 D083       566            pop dph
0717 7C0F       567            mov R4, #0xF
0719            568   STOPPED_REPEAT:
0719 C002       569            push AR2
071B 7AFF       569            mov R2, #255
071D 120039     569            lcall ?Wait_Milli_Seconds
0720 D002       569            pop AR2
0722 C002       570            push AR2
0724 7AFF       570            mov R2, #255
0726 120039     570            lcall ?Wait_Milli_Seconds
0729 D002       570            pop AR2
072B DCEC       571            djnz R4, STOPPED_REPEAT
072D            572   
072D 020596     573            ljmp main
0730            574            
0730            575   STATE1:
0730 20820F     576             jb START_BUTTON, STATEONE  
0733 C002       576            push AR2
0735 7A32       576            mov R2, #50
0737 120039     576            lcall ?Wait_Milli_Seconds
073A D002       576            pop AR2
073C 208203     576             jb START_BUTTON, STATEONE
073F 30829D     576             jnb START_BUTTON, STOPPED
0742            576   
0742            577   STATEONE:
0742 B40132     578            cjne a, #0x01, STATE2
0745 D203       579            setb start_sec_counter_total
0747 C0E0       580            push acc
0749 7407       580            mov a, #7
074B 14         580            dec a
074C 1200C1     580            lcall ?Set_Cursor_1 ; Select column and row
074F D0E0       580            pop acc                         
0751 C000       581            push ar0
0753 7801       581            mov r0, #1
0755 1200C6     581            lcall ?Display_BCD
0758 D000       581            pop ar0
075A 854A46     582            mov PWM_FLAG, PWM_HIGH
075D            583   
075D E545       584            mov a, TEMP + 1
075F B55112     585            cjne a, soak_temp + 1, STATE1_DONE
0762 E550       586            mov a, soak_temp
0764 C3         587            clr c
0765 9544       588            subb a, TEMP
0767 500B       589            jnc STATE1_DONE
0769            590   
0769 753202     591            mov CURRENT_STATE, #0x02
076C B206       592            cpl state_transition_beep_flag ; short beep to indicate change of state
076E            593            
076E 754100     594            mov SEC_COUNTER + 1, #0x00
0771 754050     595            mov SEC_COUNTER, #0x50
0774            596   
0774            597   STATE1_DONE:
0774 020608     598            ljmp forever
0777            599            
0777            600   STATE2:
0777 B40238     601            cjne a, #0x02, STATE3 ; change this back to STATE3
077A            602   
077A D202       603            setb start_sec_counter; set flag to start incrementing SEC_COUNTER to 60s
077C            604   
077C C0E0       605            push acc
077E 7407       605            mov a, #7
0780 14         605            dec a
0781 1200C1     605            lcall ?Set_Cursor_1 ; Select column and row
0784 D0E0       605            pop acc                         
0786 C000       606            push ar0
0788 7802       606            mov r0, #2
078A 1200C6     606            lcall ?Display_BCD
078D D000       606            pop ar0
078F            607   
078F 854946     608            mov PWM_FLAG, PWM_LOW
0792            609   
0792 E541       610            mov a, SEC_COUNTER + 1
0794 B55318     611            cjne a, soak_time + 1, STATE2_DONE
0797 E540       612            mov a, SEC_COUNTER
0799 B55213     613            cjne a, soak_time, STATE2_DONE
079C            614   
079C C202       615            clr start_sec_counter
079E 754100     616            mov SEC_COUNTER + 1, #0x00
07A1 754000     617            mov SEC_COUNTER, #0x00
07A4 753203     618            mov CURRENT_STATE, #0x03 ; change this back to #0x03
07A7 B206       619            cpl state_transition_beep_flag ; short beep flag to indicate change of state
07A9            620            
07A9 754502     621            mov TEMP + 1, #0x02
07AC 754410     622            mov TEMP, #0x10
07AF            623   
07AF            624   STATE2_DONE:
07AF 020608     625            ljmp forever
07B2            626            
07B2            627   STATE3:
07B2 B281       628            cpl P0.1 ; this is to test change of state
07B4 B40330     629            cjne a, #0x03, STATE4
07B7 C0E0       630            push acc
07B9 7407       630            mov a, #7
07BB 14         630            dec a
07BC 1200C1     630            lcall ?Set_Cursor_1 ; Select column and row
07BF D0E0       630            pop acc                         
07C1 C000       631            push ar0
07C3 7803       631            mov r0, #3
07C5 1200C6     631            lcall ?Display_BCD
07C8 D000       631            pop ar0
07CA 854A46     632            mov PWM_FLAG, PWM_HIGH
07CD            633   
07CD E545       634            mov a, TEMP + 1
07CF B55512     635            cjne a, reflow_temp + 1, STATE3_DONE
07D2 E554       636            mov a, reflow_temp
07D4 C3         637            clr c
07D5 9544       638            subb a, TEMP
07D7 500B       639            jnc STATE3_DONE
07D9            640   
07D9 753204     641            mov CURRENT_STATE, #0x04
07DC B206       642            cpl state_transition_beep_flag ; set flag to short beep to indicate change of state
07DE            643   
07DE 754100     644            mov SEC_COUNTER + 1, #0x00
07E1 754035     645            mov SEC_COUNTER, #0x35
07E4            646   
07E4            647   STATE3_DONE:
07E4 020608     648            ljmp forever
07E7            649            
07E7            650   STATE4:
07E7 B40438     651            cjne a, #0x04, STATE5
07EA            652   
07EA C0E0       653            push acc
07EC 7407       653            mov a, #7
07EE 14         653            dec a
07EF 1200C1     653            lcall ?Set_Cursor_1 ; Select column and row
07F2 D0E0       653            pop acc                         
07F4 C000       654            push ar0
07F6 7804       654            mov r0, #4
07F8 1200C6     654            lcall ?Display_BCD
07FB D000       654            pop ar0
07FD            655   
07FD D202       656            setb start_sec_counter
07FF            657   
07FF 854946     658            mov PWM_FLAG, PWM_LOW
0802            659   
0802 E541       660            mov a, SEC_COUNTER + 1
0804 B55718     661            cjne a, reflow_time + 1, STATE4_DONE
0807 E540       662            mov a, SEC_COUNTER
0809 B55613     663            cjne a, reflow_time, STATE4_DONE
080C            664   
080C 753205     665            mov CURRENT_STATE, #0x05
080F C202       666            clr start_sec_counter
0811 754100     667            mov SEC_COUNTER + 1, #0x00
0814 754000     668            mov SEC_COUNTER, #0x00
0817 B207       669            cpl long_beep_flag
0819            670   
0819 754500     671            mov TEMP + 1, #0x00
081C 754465     672            mov TEMP, #0x65
081F            673   
081F            674   STATE4_DONE:
081F 020608     675            ljmp forever
0822            676            
0822            677   STATE5:
0822 B287       678            cpl P0.7
0824 B40523     679            cjne a, #0x05, STATE5_DONE
0827            680   
0827 C0E0       681            push acc
0829 7407       681            mov a, #7
082B 14         681            dec a
082C 1200C1     681            lcall ?Set_Cursor_1 ; Select column and row
082F D0E0       681            pop acc                         
0831 C000       682            push ar0
0833 7805       682            mov r0, #5
0835 1200C6     682            lcall ?Display_BCD
0838 D000       682            pop ar0
083A            683   
083A 854846     684            mov PWM_FLAG, PWM_OFF
083D            685   
083D E545       686            mov a, TEMP + 1
083F B400A2     687            cjne a, #0x00, STATE3_DONE
0842 E544       688            mov a, TEMP
0844 7B60       689            mov R3, #0x60
0846 C3         690            clr c
0847 9B         691            subb a, R3
0848 5003       692            jnc FINISH_BEEP
084A            693   
084A            694   STATE5_DONE:
084A 020608     695            ljmp forever
084D            696   
084D            697   FINISH_BEEP:
084D C0E0       698            push acc
084F 7401       698            mov a, #1
0851 14         698            dec a
0852 1200C1     698            lcall ?Set_Cursor_1 ; Select column and row
0855 D0E0       698            pop acc
0857 C083       699            push dph
0859 C082       699            push dpl
085B C0E0       699            push acc
085D 90036E     699            mov dptr, #Finished_Message
0860 1200B4     699            lcall ?Send_Constant_String
0863 D0E0       699            pop acc
0865 D082       699            pop dpl
0867 D083       699            pop dph
0869 C0E0       700            push acc
086B 7401       700            mov a, #1
086D 14         700            dec a
086E 1200BF     700            lcall ?Set_Cursor_2 ; Select column and row
0871 D0E0       700            pop acc
0873 C083       701            push dph
0875 C082       701            push dpl
0877 C0E0       701            push acc
0879 90035D     701            mov dptr, #Stopped_Message2
087C 1200B4     701            lcall ?Send_Constant_String
087F D0E0       701            pop acc
0881 D082       701            pop dpl
0883 D083       701            pop dph
0885            702   
0885 753200     703            mov CURRENT_STATE, #0x00
0888 C002       704            push AR2
088A 7AFF       704            mov R2, #255
088C 120039     704            lcall ?Wait_Milli_Seconds
088F D002       704            pop AR2
0891 C002       705            push AR2
0893 7AFF       705            mov R2, #255
0895 120039     705            lcall ?Wait_Milli_Seconds
0898 D002       705            pop AR2
089A C002       706            push AR2
089C 7AFF       706            mov R2, #255
089E 120039     706            lcall ?Wait_Milli_Seconds
08A1 D002       706            pop AR2
08A3 C002       707            push AR2
08A5 7AFF       707            mov R2, #255
08A7 120039     707            lcall ?Wait_Milli_Seconds
08AA D002       707            pop AR2
08AC C002       708            push AR2
08AE 7AFF       708            mov R2, #255
08B0 120039     708            lcall ?Wait_Milli_Seconds
08B3 D002       708            pop AR2
08B5 C002       709            push AR2
08B7 7AFF       709            mov R2, #255
08B9 120039     709            lcall ?Wait_Milli_Seconds
08BC D002       709            pop AR2
08BE C002       710            push AR2
08C0 7AFF       710            mov R2, #255
08C2 120039     710            lcall ?Wait_Milli_Seconds
08C5 D002       710            pop AR2
08C7 7A09       711            mov R2, #0x9
08C9            712   DECREMENT_LABEL:
08C9 B208       713            cpl six_short_beep_flag
08CB C002       714            push AR2
08CD 7AFF       714            mov R2, #255
08CF 120039     714            lcall ?Wait_Milli_Seconds
08D2 D002       714            pop AR2
08D4            715            ;Wait_Milli_Seconds(#255)
08D4            716            ;Wait_Milli_Seconds(#255)
08D4 DAF3       717            djnz R2, DECREMENT_LABEL
08D6 B208       718            cpl six_short_beep_flag
08D8 020596     719            ljmp main
08DB            720   
08DB            721   
08DB            722   
08DB            723   
08DB            724   
08DB            725   
08DB            726   
08DB            727   
08DB            728   
