                  2   $LIST
0000              4   
0000              5   CLK           EQU 22118400 ; Microcontroller system crystal frequency in Hz
0000              6   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000              7   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000              8   TIMER2_RATE   EQU 500     ; 1000Hz, for a timer tick of 1ms
0000              9   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0000             10   
0000             11   BOOT_BUTTON     EQU P4.5 ;reset button
0000             12   SOUND_OUT       EQU P3.7
0000             13   PWM_PIN                  EQU P0.0 ;change later
0000             14   START_BUTTON     EQU P0.3 ;start button
0000             15   
0000             16   ; Reset vector
0000             17   org 0000H
0000 020199      18       ljmp main
0003             19   
0003             20   ; External interrupt 0 vector (not used in this code)
0003             21   org 0003H
0003 32          22            reti
0004             23   
0004             24   ; Timer/Counter 0 overflow interrupt vector
000B             25   org 000BH
000B 0200F1      26            ljmp Timer0_ISR
000E             27   
000E             28   ; External interrupt 1 vector (not used in this code)
0013             29   org 0013H
0013 32          30            reti
0014             31   
0014             32   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             33   org 001BH
001B 32          34            reti
001C             35   
001C             36   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             37   org 0023H 
0023 32          38            reti
0024             39            
0024             40   ; Timer/Counter 2 overflow interrupt vector
002B             41   org 002BH
002B 020153      42            ljmp Timer2_ISR
002E             43   
0030             44   dseg at 30h
0030             45   Count1ms:        ds 2 ; Used to determine when half second has passed
0032             46   CURRENT_STATE:   ds 1 ;current state 
0033             47   
0033             48   ;FSM VARIABLES
0033             49   SEC:                     ds 1 ;timer
0034             50   TEMP:                    ds 1 ;temperature
0035             51   
0035             52   ;PWM VARIABLES
0035             53   PWM_FLAG:                ds 1 ;
0036             54   PWM_COUNTER:     ds 1 ;timing
0037             55   PWM_OFF:                 ds 1 ;constants
0038             56   PWM_LOW:                 ds 1
0039             57   PWM_HIGH:                ds 1
003A             58   
003A             59   ;BEEPER FEEDBACK VARIABLES
003A             60   SHORT_BEEP:              ds 1
003B             61   SHORT_BEEP_COUNTER: ds 1
003C             62   LONG_BEEP:               ds 1
003D             63   LONG_BEEP_COUNTER: ds 1
003E             64   
0000             65   bseg
0000             66   half_seconds_flag: dbit 1 ; Set to one in the ISR every time 500 ms had passed
0001             67   
002E             68   cseg
002E             69   ; These 'equ' must match the wiring between the microcontroller and the LCD!
002E             70   LCD_RS equ P1.4
002E             71   LCD_RW equ P1.5
002E             72   LCD_E  equ P1.6
002E             73   LCD_D4 equ P3.2
002E             74   LCD_D5 equ P3.3
002E             75   LCD_D6 equ P3.4
002E             76   LCD_D7 equ P3.5
002E             77   
                 79   	$LIST
00DC             81   
00DC             82   ;---------------------------------;
00DC             83   ; Routine to initialize the ISR   ;
00DC             84   ; for timer 0                     ;
00DC             85   ;---------------------------------;
00DC             86   Timer0_Init:
00DC E589        87            mov a, TMOD
00DE 54F0        88            anl a, #0xf0 ; Clear the bits for timer 0
00E0 4401        89            orl a, #0x01 ; Configure timer 0 as 16-timer
00E2 F589        90            mov TMOD, a
00E4 758CEA      91            mov TH0, #high(TIMER0_RELOAD)
00E7 758AE8      92            mov TL0, #low(TIMER0_RELOAD)
00EA             93            ; Enable the timer and interrupts
00EA D2A9        94       setb ET0  ; Enable timer 0 interrupt
00EC D28C        95       setb TR0  ; Start timer 0
00EE D2AF        96       setb EA   ; Enable Global interrupts
00F0 22          97            ret
00F1             98   
00F1             99   ;---------------------------------;
00F1            100   ; ISR for timer 0.  Set to execute;
00F1            101   ; every 1/4096Hz to generate a    ;
00F1            102   ; 2048 Hz square wave at pin P3.7 ;
00F1            103   ;---------------------------------;
00F1            104   Timer0_ISR:
00F1            105            ; Define a latency correction for the timer reload
00F1            106            CORRECTION EQU (4+4+2+2+4+4) ; lcall+ljmp+clr+mov+mov+setb
00F1            107            ; In mode 1 we need to reload the timer.
00F1 C28C       108            clr TR0
00F3 758CEA     109            mov TH0, #high(TIMER0_RELOAD+CORRECTION)
00F6 758AFC     110            mov TL0, #low(TIMER0_RELOAD+CORRECTION)
00F9 D28C       111            setb TR0
00FB            112            
00FB C0E0       113            push acc
00FD C0D0       114            push psw
00FF            115            
00FF            116   ;************BEEPER************
00FF            117            
00FF            118   CHECK_SHORT_BEEP:
00FF E53A       119            mov a, SHORT_BEEP
0101 B40105     120            cjne a, #0x01, CHECK_LONG_BEEP
0104            121            ;SHORT BEEP ON
0104            122            
0104 B2B7       123            cpl SOUND_OUT   
0106            124   
0106 02010E     125            ljmp CHECK_OFF
0109            126   CHECK_LONG_BEEP:
0109 E53C       127            mov a, LONG_BEEP
010B B40100     128            cjne a, #0x01, CHECK_OFF
010E            129            ;LONG BEEP ON
010E            130   
010E            131            ;**************PWM**************
010E            132            
010E            133            ;CHANGE THE CODE: CLR THE PIN BELOW, SET IT ON ABOVE AT 0
010E            134   
010E            135   CHECK_OFF:
010E E535       136            mov a, PWM_FLAG
0110 B53705     137            cjne a, PWM_OFF, CHECK_LOW
0113            138            ;PWM IS OFF
0113 C280       139            clr PWM_PIN
0115 02012A     140            ljmp FINISH_PWM_FLAG_CHECK
0118            141   CHECK_LOW:
0118 B5380A     142            cjne a, PWM_LOW, CHECK_HIGH
011B            143            ;PWM IS LOW
011B E536       144            mov a, PWM_COUNTER
011D B5380A     145            cjne a, PWM_LOW, FINISH_PWM_FLAG_CHECK
0120            146            ;PWM_COUNTER = PWM_LOW
0120 C280       147            clr PWM_PIN
0122 02012A     148            ljmp FINISH_PWM_FLAG_CHECK
0125            149   CHECK_HIGH:
0125            150            ;PWM IS HIGH
0125 E536       151            mov a, PWM_COUNTER
0127 B53900     152            cjne a, PWM_HIGH, FINISH_PWM_FLAG_CHECK
012A            153            ;PWM_COUNTER = PWM_HIGH
012A            154            ;clr PWM_PIN    
012A            155   
012A            156   FINISH_PWM_FLAG_CHECK: 
012A E536       157            mov a, PWM_COUNTER
012C 2401       158            add a, #0x01
012E D4         159            da a
012F F536       160            mov PWM_COUNTER, a
0131            161   
0131 B46405     162            cjne a, #100, FINISH_PWM
0134            163            ;PIN_COUNTER has reached 100
0134 D280       164            setb PWM_PIN    
0136            165   
0136 753600     166            mov PWM_COUNTER, #0 ;reset the counter          
0139            167   
0139            168   FINISH_PWM:
0139 D0D0       169            pop psw
013B D0E0       170            pop acc
013D            171            
013D 32         172            reti
013E            173   
013E            174   Timer2_Init:
013E 75C800     175            mov T2CON, #0 ; Stop timer.  Autoreload mode.
0141            176            ; One millisecond interrupt
0141 75CB53     177            mov RCAP2H, #high(TIMER2_RELOAD)
0144 75CA34     178            mov RCAP2L, #low(TIMER2_RELOAD)
0147            179            ; Set the 16-bit variable Count1ms to zero
0147 E4         180            clr a
0148 F530       181            mov Count1ms+0, a
014A F531       182            mov Count1ms+1, a
014C            183            ; Enable the timer and interrupts
014C D2AD       184       setb ET2  ; Enable timer 2 interrupt
014E D2CA       185       setb TR2  ; Enable timer 2
0150 D2AF       186       setb EA   ; Enable Global interrupts
0152 22         187            ret
0153            188   
0153            189   ;---------------------------------;
0153            190   ; ISR for timer 2                 ;
0153            191   ;---------------------------------;
0153            192   Timer2_ISR:
0153 C2CF       193            clr TF2  ; Timer 2 doesn't clear TF2 automatically in ISR
0155            194            ;cpl P3.6 ; To check the interrupt rate with oscilloscope. It must be a 1 ms pulse.
0155            195            
0155            196            ; The two registers used in the ISR must be saved in the stack
0155 C0E0       197            push acc
0157 C0D0       198            push psw
0159            199            
0159            200            ; Increment the 16-bit counter
0159 0530       201            inc Count1ms+0    ; Increment the low 8-bits first
015B E530       202            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
015D 7002       203            jnz Inc_Done
015F 0531       204            inc Count1ms+1
0161            205   
0161            206   Inc_Done:
0161            207            ; Check if half second has passed
0161 E530       208            mov a, Count1ms+0
0163 B4F42E     209            cjne a, #low(500), Timer2_ISR_done
0166 E531       210            mov a, Count1ms+1
0168 B40129     211            cjne a, #high(500), Timer2_ISR_done
016B            212            
016B            213            ; 500 milliseconds have passed.  Set a flag so the main program knows
016B D200       214            setb half_seconds_flag ; Let the main program know half second had passed
016D            215            ;cpl TR1 ; This line makes a beep-silence-beep-silence sound
016D            216   
016D            217            ;************BEEPER************
016D            218   
016D E53A       219            mov a, SHORT_BEEP
016F B40111     220            cjne a, #0x01, CHECK_LONG_BEEP_2
0172            221   
0172            222            ;SHORT BEEP ON, increment counter
0172            223   
0172 E53B       224            mov a, SHORT_BEEP_COUNTER
0174 2401       225            add a, #0x01
0176 F53B       226            mov SHORT_BEEP_COUNTER, a
0178            227   
0178 B4020D     228            cjne a, #0x02, FINISH_BEEPER 
017B            229   
017B            230            ;STOP SHORT BEEP
017B 7400       231            mov a, #0x00
017D F53A       232            mov SHORT_BEEP, a
017F F53B       233            mov SHORT_BEEP_COUNTER, a
0181 C2B7       234            clr SOUND_OUT
0183            235   
0183            236   CHECK_LONG_BEEP_2:
0183 E53C       237            mov a, LONG_BEEP
0185 B40186     238            cjne a, #0x01, CHECK_OFF
0188            239            ;LONG BEEP ON
0188            240   FINISH_BEEPER:
0188            241            ; Reset the milli-seconds counter, it is a 16-bit variable
0188            242   
0188            243            ;************COUNTER************
0188            244   
0188 E4         245            clr a
0189 F530       246            mov Count1ms+0, a
018B F531       247            mov Count1ms+1, a
018D            248            ; Increment the BCD counter
018D E533       249            mov a, SEC
018F 2401       250            add a, #0x01
0191 D4         251            da a
0192 F533       252            mov SEC, a
0194            253            
0194            254   Timer2_ISR_done:
0194 D0D0       255            pop psw
0196 D0E0       256            pop acc
0198 32         257            reti
0199            258   
0199            259   ;---------------------------------;
0199            260   ; Main program. Includes hardware ;
0199            261   ; initialization and 'forever'    ;
0199            262   ; loop.                           ;
0199            263   ;---------------------------------;
0199            264   main:
0199            265            ; Initialization
0199 75817F     266            mov SP, #7FH
019C 75C100     267            mov PMOD, #0 ; Configure all ports in bidirectional mode
019F 1200DC     268       lcall Timer0_Init
01A2 12013E     269            lcall Timer2_Init
01A5 120088     270            lcall LCD_4BIT
01A8            271            ; For convenience a few handy macros are included in 'LCD_4bit.inc':
01A8 D200       272            setb half_seconds_flag
01AA 753300     273            mov SEC, #0x00
01AD 753200     274            mov CURRENT_STATE, #0
01B0 753600     275            mov PWM_COUNTER, #0
01B3 853735     276            mov PWM_FLAG, PWM_OFF
01B6 753700     277            mov PWM_OFF, #0
01B9 753814     278            mov PWM_LOW, #20
01BC 753964     279            mov PWM_HIGH, #100
01BF 753A00     280            mov SHORT_BEEP, #0x00
01C2 753B00     281            mov SHORT_BEEP_COUNTER, #0
01C5 753C00     282            mov LONG_BEEP, #0
01C8 753D00     283            mov LONG_BEEP_COUNTER, #0
01CB            284   
01CB            285            ; After initialization the program stays in this 'forever' loop
01CB            286   
01CB            287   forever:
01CB 20C532     288            jb BOOT_BUTTON, loop_a  ; if the 'BOOT' button is not pressed skip
01CE C002       289            push AR2
01D0 7A32       289            mov R2, #50
01D2 120039     289            lcall ?Wait_Milli_Seconds
01D5 D002       289            pop AR2         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
01D7 20C526     290            jb BOOT_BUTTON, loop_a  ; if the 'BOOT' button is not pressed skip
01DA 30C5FD     291            jnb BOOT_BUTTON, $              ; wait for button release
01DD            292            ; A clean press of the 'BOOT' button has been detected, reset the BCD counter.
01DD            293            ; But first stop the timer and reset the milli-seconds counter, to resync everything.
01DD C28C       294            clr TR0
01DF E4         295            clr a
01E0 F530       296            mov Count1ms+0, a
01E2 F531       297            mov Count1ms+1, a
01E4            298   
01E4 753300     299            mov SEC, #0x00
01E7 753200     300            mov CURRENT_STATE, #0
01EA 753600     301            mov PWM_COUNTER, #0
01ED 853735     302            mov PWM_FLAG, PWM_OFF
01F0 753A00     303            mov SHORT_BEEP, #0x00
01F3 753B00     304            mov SHORT_BEEP_COUNTER, #0
01F6 753C00     305            mov LONG_BEEP, #0
01F9 753D00     306            mov LONG_BEEP_COUNTER, #0
01FC            307   
01FC D28C       308            setb TR0                ; Re-enable the timer
01FE 8003       309            sjmp loop_b             ; Display the new value
0200            310   loop_a:
0200 3000C8     311            jnb half_seconds_flag, forever
0203            312   loop_b:
0203 C200       313       clr half_seconds_flag ; We clear this flag in the main forever, but it is set in the ISR for timer 0
0205            314   
0205 E532       315            mov a, CURRENT_STATE
0207            316   STATE0:
0207 B4001E     317            cjne a, #0, STATE1
020A 853735     318            mov PWM_FLAG, PWM_OFF
020D            319   
020D 753A01     320            mov SHORT_BEEP, #0x01 ;short beep enabled
0210 208312     321            jb START_BUTTON, STATE0_DONE
0213 C002       322            push AR2
0215 7A32       322            mov R2, #50
0217 120039     322            lcall ?Wait_Milli_Seconds
021A D002       322            pop AR2; debounce time
021C 208306     323            jb START_BUTTON, STATE0_DONE
021F 3083FD     324            jnb START_BUTTON, $ ; Wait for key release
0222 753201     325            mov CURRENT_STATE, #1
0225            326   STATE0_DONE:
0225 0201CB     327            ljmp forever
0228            328   STATE1:
0228 B40113     329            cjne a, #1, STATE2
022B            330                    
022B 853935     331            mov PWM_FLAG, PWM_HIGH
022E 753300     332            mov SEC, #0
0231 7496       333            mov a, #150
0233 C3         334            clr c
0234 9534       335            subb a, TEMP
0236 5003       336            jnc STATE1_DONE
0238 753202     337            mov CURRENT_STATE, #2
023B            338   STATE1_DONE:
023B 0201CB     339            ljmp forever
023E            340   STATE2:
023E B40210     341            cjne a, #2, STATE3
0241 853835     342            mov PWM_FLAG, PWM_LOW
0244 743C       343            mov a, #60
0246 C3         344            clr c
0247 9533       345            subb a, SEC
0249 5003       346            jnc STATE2_DONE
024B 753203     347            mov CURRENT_STATE, #3
024E            348   STATE2_DONE:
024E 0201CB     349            ljmp forever
0251            350   STATE3:
0251 B40313     351            cjne a, #3, STATE4
0254 853935     352            mov PWM_FLAG, PWM_HIGH
0257 753300     353            mov SEC, #0
025A 74DC       354            mov a, #220
025C C3         355            clr c
025D 9534       356            subb a, TEMP
025F 5003       357            jnc STATE3_DONE
0261 753204     358            mov CURRENT_STATE, #4
0264            359   STATE3_DONE:
0264 0201CB     360            ljmp forever
0267            361   STATE4:
0267 B40410     362            cjne a, #4, STATE5
026A 853835     363            mov PWM_FLAG, PWM_LOW
026D 742D       364            mov a, #45
026F C3         365            clr c
0270 9533       366            subb a, SEC
0272 5003       367            jnc STATE4_DONE
0274 753205     368            mov CURRENT_STATE, #5
0277            369   STATE4_DONE:
0277 0201CB     370            ljmp forever
027A            371   STATE5:
027A B40510     372            cjne a, #5, STATE5_DONE
027D 853735     373            mov PWM_FLAG, PWM_OFF
0280 753300     374            mov SEC, #0
0283 743C       375            mov a, #60
0285 C3         376            clr c
0286 9534       377            subb a, TEMP
0288 5003       378            jnc STATE5_DONE
028A 753200     379            mov CURRENT_STATE, #0
028D            380   STATE5_DONE:
028D 0201CB     381            ljmp forever
