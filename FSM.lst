                  2   $LIST
0000              4   
0000              5   CLK           EQU 22118400 ; Microcontroller system crystal frequency in Hz
0000              6   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000              7   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000              8   TIMER2_RATE   EQU 500     ; 1000Hz, for a timer tick of 1ms
0000              9   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0000             10   
0000             11   BOOT_BUTTON     EQU P4.5 ;reset button
0000             12   SOUND_OUT       EQU P3.7
0000             13   PWM_PIN                  EQU P0.1 ;change later
0000             14   START_BUTTON     EQU P0.3 ;start button
0000             15   
0000             16   ; Reset vector
0000             17   org 0000H
0000 0201A3      18       ljmp main
0003             19   
0003             20   ; External interrupt 0 vector (not used in this code)
0003             21   org 0003H
0003 32          22            reti
0004             23   
0004             24   ; Timer/Counter 0 overflow interrupt vector
000B             25   org 000BH
000B 0200F1      26            ljmp Timer0_ISR
000E             27   
000E             28   ; External interrupt 1 vector (not used in this code)
0013             29   org 0013H
0013 32          30            reti
0014             31   
0014             32   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             33   org 001BH
001B 32          34            reti
001C             35   
001C             36   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             37   org 0023H 
0023 32          38            reti
0024             39            
0024             40   ; Timer/Counter 2 overflow interrupt vector
002B             41   org 002BH
002B 02015D      42            ljmp Timer2_ISR
002E             43   
0030             44   dseg at 30h
0030             45   Count1ms:        ds 2 ; Used to determine when half second has passed
0032             46   CURRENT_STATE:   ds 1 ;current state 
0033             47   
0033             48   ;FSM VARIABLES
0033             49   SEC:                     ds 1 ;timer
0034             50   TEMP:                    ds 1 ;temperature
0035             51   
0035             52   ;PWM VARIABLES
0035             53   PWM_FLAG:                ds 1 ;
0036             54   PWM_COUNTER:     ds 1 ;timing
0037             55   PWM_OFF:                 ds 1 ;constants
0038             56   PWM_LOW:                 ds 1
0039             57   PWM_HIGH:                ds 1
003A             58   
003A             59   ;BEEPER FEEDBACK VARIABLES
003A             60   SHORT_BEEP:              ds 1
003B             61   SHORT_BEEP_COUNTER: ds 1
003C             62   LONG_BEEP:               ds 1
003D             63   LONG_BEEP_COUNTER: ds 1
003E             64   
0000             65   bseg
0000             66   half_seconds_flag: dbit 1 ; Set to one in the ISR every time 500 ms had passed
0001             67   
002E             68   cseg
002E             69   ; These 'equ' must match the wiring between the microcontroller and the LCD!
002E             70   LCD_RS equ P1.4
002E             71   LCD_RW equ P1.5
002E             72   LCD_E  equ P1.6
002E             73   LCD_D4 equ P3.2
002E             74   LCD_D5 equ P3.3
002E             75   LCD_D6 equ P3.4
002E             76   LCD_D7 equ P3.5
002E             77   
                 79   	$LIST
00DC             81   
00DC             82   ;---------------------------------;
00DC             83   ; Routine to initialize the ISR   ;
00DC             84   ; for timer 0                     ;
00DC             85   ;---------------------------------;
00DC             86   Timer0_Init:
00DC E589        87            mov a, TMOD
00DE 54F0        88            anl a, #0xf0 ; Clear the bits for timer 0
00E0 4401        89            orl a, #0x01 ; Configure timer 0 as 16-timer
00E2 F589        90            mov TMOD, a
00E4 758CEA      91            mov TH0, #high(TIMER0_RELOAD)
00E7 758AE8      92            mov TL0, #low(TIMER0_RELOAD)
00EA             93            ; Enable the timer and interrupts
00EA D2A9        94       setb ET0  ; Enable timer 0 interrupt
00EC D28C        95       setb TR0  ; Start timer 0
00EE D2AF        96       setb EA   ; Enable Global interrupts
00F0 22          97            ret
00F1             98   
00F1             99   ;---------------------------------;
00F1            100   ; ISR for timer 0.  Set to execute;
00F1            101   ; every 1/4096Hz to generate a    ;
00F1            102   ; 2048 Hz square wave at pin P3.7 ;
00F1            103   ;---------------------------------;
00F1            104   Timer0_ISR:
00F1            105            ; Define a latency correction for the timer reload
00F1            106            CORRECTION EQU (4+4+2+2+4+4) ; lcall+ljmp+clr+mov+mov+setb
00F1            107            ; In mode 1 we need to reload the timer.
00F1 C28C       108            clr TR0
00F3 758CEA     109            mov TH0, #high(TIMER0_RELOAD+CORRECTION)
00F6 758AFC     110            mov TL0, #low(TIMER0_RELOAD+CORRECTION)
00F9 D28C       111            setb TR0
00FB            112            
00FB C0E0       113            push acc
00FD C0D0       114            push psw
00FF            115            
00FF            116   ;************BEEPER************
00FF            117            
00FF            118   CHECK_SHORT_BEEP:
00FF E53A       119            mov a, SHORT_BEEP
0101 B40105     120            cjne a, #0x01, CHECK_LONG_BEEP
0104            121            ;SHORT BEEP ON
0104            122            
0104 B2B7       123            cpl SOUND_OUT   
0106            124   
0106 02010E     125            ljmp CHECK_OFF
0109            126   CHECK_LONG_BEEP:
0109 E53C       127            mov a, LONG_BEEP
010B B40100     128            cjne a, #0x01, CHECK_OFF
010E            129            ;LONG BEEP ON
010E            130   
010E            131            ;**************PWM**************
010E            132            
010E            133            ;CODED IN ACTIVE LOW
010E            134   
010E            135   CHECK_OFF:
010E E535       136            mov a, PWM_FLAG
0110 B53705     137            cjne a, PWM_OFF, CHECK_LOW
0113            138            ;PWM IS OFF
0113            139            
0113            140            ;subb a, TEMP
0113            141            ;jnc STATE1_DONE
0113 D281       142            setb PWM_PIN
0115            143   
0115 02012C     144            ljmp FINISH_PWM_FLAG_CHECK
0118            145   CHECK_LOW:
0118 B5380A     146            cjne a, PWM_LOW, CHECK_HIGH
011B            147            ;PWM IS LOW
011B E536       148            mov a, PWM_COUNTER
011D B5380C     149            cjne a, PWM_LOW, FINISH_PWM_FLAG_CHECK
0120            150            ;PWM_COUNTER = PWM_LOW
0120            151   
0120 D281       152            setb PWM_PIN
0122            153   
0122 02012C     154            ljmp FINISH_PWM_FLAG_CHECK
0125            155   CHECK_HIGH:
0125            156            ;PWM IS HIGH
0125 E536       157            mov a, PWM_COUNTER
0127 B53902     158            cjne a, PWM_HIGH, FINISH_PWM_FLAG_CHECK
012A            159            ;PWM_COUNTER = PWM_HIGH
012A            160            
012A C281       161            clr PWM_PIN
012C            162   
012C            163   FINISH_PWM_FLAG_CHECK: 
012C E536       164            mov a, PWM_COUNTER
012E 2401       165            add a, #0x01
0130 D4         166            da a
0131 F536       167            mov PWM_COUNTER, a
0133            168   
0133 B4640D     169            cjne a, #100, FINISH_PWM
0136            170            ;PWM_COUNTER has reached 100
0136            171            
0136            172            ;check if PWM is off (so don't clr pin)
0136            173   
0136 E535       174            mov a, PWM_FLAG
0138 B53702     175            cjne a, PWM_OFF, CLR_PWM
013B            176            
013B            177            ;PWM OFF
013B 8002       178            sjmp RESET_PWM_COUNTER 
013D            179   
013D            180   CLR_PWM:
013D C281       181            clr PWM_PIN     
013F            182   
013F            183   RESET_PWM_COUNTER:
013F 7400       184            mov a, #0
0141 F536       185            mov PWM_COUNTER, a ;reset the counter   
0143            186   
0143            187   FINISH_PWM:
0143            188   
0143 D0D0       189            pop psw
0145 D0E0       190            pop acc
0147            191            
0147 32         192            reti
0148            193   
0148            194   Timer2_Init:
0148 75C800     195            mov T2CON, #0 ; Stop timer.  Autoreload mode.
014B            196            ; One millisecond interrupt
014B 75CB53     197            mov RCAP2H, #high(TIMER2_RELOAD)
014E 75CA34     198            mov RCAP2L, #low(TIMER2_RELOAD)
0151            199            ; Set the 16-bit variable Count1ms to zero
0151 E4         200            clr a
0152 F530       201            mov Count1ms+0, a
0154 F531       202            mov Count1ms+1, a
0156            203            ; Enable the timer and interrupts
0156 D2AD       204       setb ET2  ; Enable timer 2 interrupt
0158 D2CA       205       setb TR2  ; Enable timer 2
015A D2AF       206       setb EA   ; Enable Global interrupts
015C 22         207            ret
015D            208   
015D            209   ;---------------------------------;
015D            210   ; ISR for timer 2                 ;
015D            211   ;---------------------------------;
015D            212   Timer2_ISR:
015D C2CF       213            clr TF2  ; Timer 2 doesn't clear TF2 automatically in ISR
015F            214            ;cpl P3.6 ; To check the interrupt rate with oscilloscope. It must be a 1 ms pulse.
015F            215            
015F            216            ; The two registers used in the ISR must be saved in the stack
015F C0E0       217            push acc
0161 C0D0       218            push psw
0163            219            
0163            220            ; Increment the 16-bit counter
0163 0530       221            inc Count1ms+0    ; Increment the low 8-bits first
0165 E530       222            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
0167 7002       223            jnz Inc_Done
0169 0531       224            inc Count1ms+1
016B            225   
016B            226   Inc_Done:
016B            227            ; Check if half second has passed
016B E530       228            mov a, Count1ms+0
016D B4F42E     229            cjne a, #low(500), Timer2_ISR_done
0170 E531       230            mov a, Count1ms+1
0172 B40129     231            cjne a, #high(500), Timer2_ISR_done
0175            232            
0175            233            ; 500 milliseconds have passed.  Set a flag so the main program knows
0175 D200       234            setb half_seconds_flag ; Let the main program know half second had passed
0177            235            ;cpl TR1 ; This line makes a beep-silence-beep-silence sound
0177            236   
0177            237            ;************BEEPER************
0177            238   
0177 E53A       239            mov a, SHORT_BEEP
0179 B40111     240            cjne a, #0x01, CHECK_LONG_BEEP_2
017C            241   
017C            242            ;SHORT BEEP ON, increment counter
017C            243   
017C E53B       244            mov a, SHORT_BEEP_COUNTER
017E 2401       245            add a, #0x01
0180 F53B       246            mov SHORT_BEEP_COUNTER, a
0182            247   
0182 B4020D     248            cjne a, #0x02, FINISH_BEEPER 
0185            249   
0185            250            ;STOP SHORT BEEP
0185 7400       251            mov a, #0x00
0187 F53A       252            mov SHORT_BEEP, a
0189 F53B       253            mov SHORT_BEEP_COUNTER, a
018B C2B7       254            clr SOUND_OUT
018D            255   
018D            256   CHECK_LONG_BEEP_2:
018D E53C       257            mov a, LONG_BEEP
018F B40100     258            cjne a, #0x01, FINISH_BEEPER
0192            259            ;LONG BEEP ON
0192            260   FINISH_BEEPER:
0192            261            ; Reset the milli-seconds counter, it is a 16-bit variable
0192            262   
0192            263            ;************COUNTER************
0192            264   
0192 E4         265            clr a
0193 F530       266            mov Count1ms+0, a
0195 F531       267            mov Count1ms+1, a
0197            268            ; Increment the BCD counter
0197 E533       269            mov a, SEC
0199 2401       270            add a, #0x01
019B D4         271            da a
019C F533       272            mov SEC, a
019E            273            
019E            274   Timer2_ISR_done:
019E D0D0       275            pop psw
01A0 D0E0       276            pop acc
01A2 32         277            reti
01A3            278   
01A3            279   ;---------------------------------;
01A3            280   ; Main program. Includes hardware ;
01A3            281   ; initialization and 'forever'    ;
01A3            282   ; loop.                           ;
01A3            283   ;---------------------------------;
01A3            284   main:
01A3            285            ; Initialization
01A3 75817F     286            mov SP, #7FH
01A6 75C100     287            mov PMOD, #0 ; Configure all ports in bidirectional mode
01A9 1200DC     288       lcall Timer0_Init
01AC 120148     289            lcall Timer2_Init
01AF 120088     290            lcall LCD_4BIT
01B2            291            ; For convenience a few handy macros are included in 'LCD_4bit.inc':
01B2 D200       292            setb half_seconds_flag
01B4 753300     293            mov SEC, #0
01B7 753200     294            mov CURRENT_STATE, #0
01BA 753600     295            mov PWM_COUNTER, #0
01BD 853935     296            mov PWM_FLAG, PWM_HIGH
01C0 753700     297            mov PWM_OFF, #0
01C3 753814     298            mov PWM_LOW, #20
01C6 753964     299            mov PWM_HIGH, #100
01C9 753A00     300            mov SHORT_BEEP, #0
01CC 753B00     301            mov SHORT_BEEP_COUNTER, #0
01CF 753C00     302            mov LONG_BEEP, #0
01D2 753D00     303            mov LONG_BEEP_COUNTER, #0
01D5            304   
01D5            305            ; After initialization the program stays in this 'forever' loop
01D5            306   
01D5            307   forever:
01D5 20C532     308            jb BOOT_BUTTON, loop_a  ; if the 'BOOT' button is not pressed skip
01D8 C002       309            push AR2
01DA 7A32       309            mov R2, #50
01DC 120039     309            lcall ?Wait_Milli_Seconds
01DF D002       309            pop AR2         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
01E1 20C526     310            jb BOOT_BUTTON, loop_a  ; if the 'BOOT' button is not pressed skip
01E4 30C5FD     311            jnb BOOT_BUTTON, $              ; wait for button release
01E7            312            ; A clean press of the 'BOOT' button has been detected, reset the BCD counter.
01E7            313            ; But first stop the timer and reset the milli-seconds counter, to resync everything.
01E7 C28C       314            clr TR0
01E9 E4         315            clr a
01EA F530       316            mov Count1ms+0, a
01EC F531       317            mov Count1ms+1, a
01EE            318   
01EE 753300     319            mov SEC, #0x00
01F1 753200     320            mov CURRENT_STATE, #0
01F4 753600     321            mov PWM_COUNTER, #0
01F7 853735     322            mov PWM_FLAG, PWM_OFF
01FA 753A00     323            mov SHORT_BEEP, #0x00
01FD 753B00     324            mov SHORT_BEEP_COUNTER, #0
0200 753C00     325            mov LONG_BEEP, #0
0203 753D00     326            mov LONG_BEEP_COUNTER, #0
0206            327   
0206 D28C       328            setb TR0                ; Re-enable the timer
0208 8003       329            sjmp loop_b             ; Display the new value
020A            330   loop_a:
020A 3000C8     331            jnb half_seconds_flag, forever
020D            332   loop_b:
020D C200       333       clr half_seconds_flag ; We clear this flag in the main forever, but it is set in the ISR for timer 0
020F            334   
020F E532       335            mov a, CURRENT_STATE
0211            336   STATE0:
0211 B4001E     337            cjne a, #0, STATE1
0214 853735     338            mov PWM_FLAG, PWM_OFF
0217 208315     339            jb START_BUTTON, STATE0_DONE
021A C002       340            push AR2
021C 7A32       340            mov R2, #50
021E 120039     340            lcall ?Wait_Milli_Seconds
0221 D002       340            pop AR2; debounce time
0223 208309     341            jb START_BUTTON, STATE0_DONE
0226 3083FD     342            jnb START_BUTTON, $ ; Wait for key release
0229 753201     343            mov CURRENT_STATE, #0x01
022C 753A01     344            mov SHORT_BEEP, #0x01
022F            345   STATE0_DONE:
022F 0201D5     346            ljmp forever
0232            347   STATE1:
0232 B40113     348            cjne a, #1, STATE2
0235 853935     349            mov PWM_FLAG, PWM_HIGH
0238 753300     350            mov SEC, #0
023B 7496       351            mov a, #150
023D C3         352            clr c
023E 9534       353            subb a, TEMP
0240 5003       354            jnc STATE1_DONE
0242 753202     355            mov CURRENT_STATE, #2
0245            356   STATE1_DONE:
0245 0201D5     357            ljmp forever
0248            358   STATE2:
0248 B40210     359            cjne a, #2, STATE3
024B 853835     360            mov PWM_FLAG, PWM_LOW
024E 743C       361            mov a, #60
0250 C3         362            clr c
0251 9533       363            subb a, SEC
0253 5003       364            jnc STATE2_DONE
0255 753203     365            mov CURRENT_STATE, #3
0258            366   STATE2_DONE:
0258 0201D5     367            ljmp forever
025B            368   STATE3:
025B B40313     369            cjne a, #3, STATE4
025E 853935     370            mov PWM_FLAG, PWM_HIGH
0261 753300     371            mov SEC, #0
0264 74DC       372            mov a, #220
0266 C3         373            clr c
0267 9534       374            subb a, TEMP
0269 5003       375            jnc STATE3_DONE
026B 753204     376            mov CURRENT_STATE, #4
026E            377   STATE3_DONE:
026E 0201D5     378            ljmp forever
0271            379   STATE4:
0271 B40410     380            cjne a, #4, STATE5
0274 853835     381            mov PWM_FLAG, PWM_LOW
0277 742D       382            mov a, #45
0279 C3         383            clr c
027A 9533       384            subb a, SEC
027C 5003       385            jnc STATE4_DONE
027E 753205     386            mov CURRENT_STATE, #5
0281            387   STATE4_DONE:
0281 0201D5     388            ljmp forever
0284            389   STATE5:
0284 B40510     390            cjne a, #5, STATE5_DONE
0287 853735     391            mov PWM_FLAG, PWM_OFF
028A 753300     392            mov SEC, #0
028D 743C       393            mov a, #60
028F C3         394            clr c
0290 9534       395            subb a, TEMP
0292 5003       396            jnc STATE5_DONE
0294 753200     397            mov CURRENT_STATE, #0
0297            398   STATE5_DONE:
0297 0201D5     399            ljmp forever
